@{
    ViewData["Title"] = "Emoji Tetris";
}
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .game-container {
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }

        .game-board {
            border: 3px solid #fff;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 10px;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(10, 30px);
            grid-template-rows: repeat(20, 30px);
            gap: 1px;
            background: #222;
            border-radius: 5px;
            padding: 5px;
        }

        .cell {
            width: 30px;
            height: 30px;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            border-radius: 3px;
        }

        .game-info {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 10px;
            min-width: 200px;
        }

        .next-piece {
            display: grid;
            grid-template-columns: repeat(4, 25px);
            grid-template-rows: repeat(4, 25px);
            gap: 1px;
            background: #333;
            border-radius: 5px;
            padding: 10px;
            margin: 10px 0;
        }

        .next-cell {
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
        }

        .controls {
            margin-top: 20px;
            font-size: 14px;
            line-height: 1.6;
        }

        .game-over {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            display: none;
        }

        button {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background: #5a67d8;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>

    <div>
        <h1>🎮 Emoji Tetris 🎮</h1>
        <div class="game-container">
            <div class="game-board">
                <div class="board" id="board"></div>
            </div>
            <div class="game-info">
                <h3>Score: <span id="score">0</span></h3>
                <h3>Level: <span id="level">1</span></h3>
                <h3>Lines: <span id="lines">0</span></h3>
                
                <h4>Next Piece:</h4>
                <div class="next-piece" id="nextPiece"></div>
                
                <div class="controls">
                    <strong>Controls:</strong><br>
                    ← → Move<br>
                    ↓ Soft Drop<br>
                    ↑ Rotate<br>
                    Space: Hard Drop<br>
                    P: Pause
                </div>
                
                <button onclick="startNewGame()">New Game</button>
            </div>
        </div>
    </div>

    <div class="game-over" id="gameOver">
        <h2>Game Over! 💀</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button onclick="startNewGame()">Play Again</button>
    </div>

    <script>
        // Game constants
        const BOARD_WIDTH = 10;
        const BOARD_HEIGHT = 20;
        const EMPTY = '';

        // Emoji pieces
        const PIECES = {
            I: { emoji: '🥹', shape: [[1,1,1,1]] },
            O: { emoji: '🤣', shape: [[1,1],[1,1]] },
            T: { emoji: '😈', shape: [[0,1,0],[1,1,1]] },
            S: { emoji: '🍆', shape: [[0,1,1],[1,1,0]] },
            Z: { emoji: '🤤', shape: [[1,1,0],[0,1,1]] },
            J: { emoji: '♏️', shape: [[1,0,0],[1,1,1]] },
            L: { emoji: '🌞', shape: [[0,0,1],[1,1,1]] }
        };

        // Game state
        let board = [];
        let currentPiece = null;
        let nextPiece = null;
        let score = 0;
        let level = 1;
        let lines = 0;
        let gameRunning = false;
        let dropTimer = 0;
        let dropInterval = 1000;
        let lastTime = 0;

        // Initialize game
        function init() {
            // Create board
            board = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(EMPTY));
            
            // Create DOM elements
            createBoardDOM();
            createNextPieceDOM();
            
            // Generate first pieces
            nextPiece = getRandomPiece();
            spawnNewPiece();
            
            // Start game loop
            gameRunning = true;
            requestAnimationFrame(gameLoop);
            
            // Add event listeners
            document.addEventListener('keydown', handleKeyPress);
        }

        function createBoardDOM() {
            const boardElement = document.getElementById('board');
            boardElement.innerHTML = '';
            
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.id = `cell-${x}-${y}`;
                    boardElement.appendChild(cell);
                }
            }
        }

        function createNextPieceDOM() {
            const nextElement = document.getElementById('nextPiece');
            nextElement.innerHTML = '';
            
            for (let y = 0; y < 4; y++) {
                for (let x = 0; x < 4; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'next-cell';
                    cell.id = `next-${x}-${y}`;
                    nextElement.appendChild(cell);
                }
            }
        }

        function getRandomPiece() {
            const pieceTypes = Object.keys(PIECES);
            const randomType = pieceTypes[Math.floor(Math.random() * pieceTypes.length)];
            return {
                type: randomType,
                emoji: PIECES[randomType].emoji,
                shape: PIECES[randomType].shape,
                x: Math.floor(BOARD_WIDTH / 2) - Math.floor(PIECES[randomType].shape[0].length / 2),
                y: 0
            };
        }

        function spawnNewPiece() {
            currentPiece = nextPiece;
            nextPiece = getRandomPiece();
            
            if (!isValidPosition(currentPiece, currentPiece.x, currentPiece.y)) {
                gameOver();
                return;
            }
            
            updateNextPieceDisplay();
        }

        function updateNextPieceDisplay() {
            // Clear next piece display
            for (let y = 0; y < 4; y++) {
                for (let x = 0; x < 4; x++) {
                    document.getElementById(`next-${x}-${y}`).textContent = '';
                }
            }
            
            // Draw next piece
            for (let y = 0; y < nextPiece.shape.length; y++) {
                for (let x = 0; x < nextPiece.shape[y].length; x++) {
                    if (nextPiece.shape[y][x]) {
                        document.getElementById(`next-${x}-${y}`).textContent = nextPiece.emoji;
                    }
                }
            }
        }

        function isValidPosition(piece, newX, newY, newShape = null) {
            const shape = newShape || piece.shape;
            
            for (let y = 0; y < shape.length; y++) {
                for (let x = 0; x < shape[y].length; x++) {
                    if (shape[y][x]) {
                        const boardX = newX + x;
                        const boardY = newY + y;
                        
                        if (boardX < 0 || boardX >= BOARD_WIDTH || 
                            boardY >= BOARD_HEIGHT ||
                            (boardY >= 0 && board[boardY][boardX] !== EMPTY)) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        function rotatePiece(piece) {
            const rotated = piece.shape[0].map((_, i) =>
                piece.shape.map(row => row[i]).reverse()
            );
            return rotated;
        }

        function placePiece() {
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        const boardY = currentPiece.y + y;
                        const boardX = currentPiece.x + x;
                        if (boardY >= 0) {
                            board[boardY][boardX] = currentPiece.emoji;
                        }
                    }
                }
            }
            
            checkLines();
            spawnNewPiece();
        }

        function checkLines() {
            let linesCleared = 0;
            
            for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== EMPTY)) {
                    board.splice(y, 1);
                    board.unshift(Array(BOARD_WIDTH).fill(EMPTY));
                    linesCleared++;
                    y++; // Check same line again
                }
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                score += linesCleared * 100 * level;
                level = Math.floor(lines / 10) + 1;
                dropInterval = Math.max(50, 1000 - (level - 1) * 50);
                
                updateScore();
            }
        }

        function updateScore() {
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('lines').textContent = lines;
        }

        function draw() {
            // Clear board display
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    document.getElementById(`cell-${x}-${y}`).textContent = board[y][x];
                }
            }
            
            // Draw current piece
            if (currentPiece) {
                for (let y = 0; y < currentPiece.shape.length; y++) {
                    for (let x = 0; x < currentPiece.shape[y].length; x++) {
                        if (currentPiece.shape[y][x]) {
                            const boardX = currentPiece.x + x;
                            const boardY = currentPiece.y + y;
                            if (boardY >= 0 && boardY < BOARD_HEIGHT && boardX >= 0 && boardX < BOARD_WIDTH) {
                                document.getElementById(`cell-${boardX}-${boardY}`).textContent = currentPiece.emoji;
                            }
                        }
                    }
                }
            }
        }

        function gameLoop(time) {
            if (!gameRunning) return;
            
            const deltaTime = time - lastTime;
            lastTime = time;
            dropTimer += deltaTime;
            
            if (dropTimer >= dropInterval) {
                if (currentPiece && isValidPosition(currentPiece, currentPiece.x, currentPiece.y + 1)) {
                    currentPiece.y++;
                } else if (currentPiece) {
                    placePiece();
                }
                dropTimer = 0;
            }
            
            draw();
            requestAnimationFrame(gameLoop);
        }

        function handleKeyPress(event) {
            if (!gameRunning || !currentPiece) return;
            
            switch (event.code) {
                case 'ArrowLeft':
                    if (isValidPosition(currentPiece, currentPiece.x - 1, currentPiece.y)) {
                        currentPiece.x--;
                    }
                    break;
                case 'ArrowRight':
                    if (isValidPosition(currentPiece, currentPiece.x + 1, currentPiece.y)) {
                        currentPiece.x++;
                    }
                    break;
                case 'ArrowDown':
                    if (isValidPosition(currentPiece, currentPiece.x, currentPiece.y + 1)) {
                        currentPiece.y++;
                        score += 1;
                        updateScore();
                    }
                    break;
                case 'ArrowUp':
                    const rotated = rotatePiece(currentPiece);
                    if (isValidPosition(currentPiece, currentPiece.x, currentPiece.y, rotated)) {
                        currentPiece.shape = rotated;
                    }
                    break;
                case 'Space':
                    while (isValidPosition(currentPiece, currentPiece.x, currentPiece.y + 1)) {
                        currentPiece.y++;
                        score += 2;
                    }
                    updateScore();
                    break;
                case 'KeyP':
                    gameRunning = !gameRunning;
                    if (gameRunning) {
                        requestAnimationFrame(gameLoop);
                    }
                    break;
            }
            event.preventDefault();
        }

        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOver').style.display = 'block';
        }

        function startNewGame() {
            document.getElementById('gameOver').style.display = 'none';
            score = 0;
            level = 1;
            lines = 0;
            dropInterval = 1000;
            updateScore();
            init();
        }

        // Start the game
        init();
    </script>

